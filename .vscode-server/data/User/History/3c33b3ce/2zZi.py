from typing import Any
import boto3
import sys
from django.shortcuts import render
from django.http import HttpResponse
from rest_framework.views import APIView
from rest_framework import generics

from rest_framework.response import Response
from django.views.decorators.csrf import csrf_exempt
from django.views.generic import ListView
from rest_framework import status
from django.http import Http404
from json import JSONEncoder
import datetime
from django.http import JsonResponse
from django.core import serializers
import json
import numpy
from .models import RS_AWS
from .serializers import PostSerializer

class DateTimeEncoder(JSONEncoder):
                # Overide the default method
                def default(self, obj: Any) -> Any:
                        if isinstance(obj, (datetime.date, datetime.datetime)):
                                return obj.isoformat()
                        
# AWS Auth configuration for boto3
session = boto3.Session(profile_name='default')

ec2_resource = boto3.resource('ec2')

ec2_client = boto3.client('ec2',
                        #aws_access_key_id='access_key',
                        #aws_secret_access_key= 'secretkey',
                        #region_name = 'ap-northeast-2'

                            
                        
                        )


class ListView(APIView):
        def get(self,post):
                ec2_list = ec2_client.describe_instances(
                        Filters=[
                                {
                                'Name': 'tag:Name',
                                'Values': [
                                        'Cloud_Vulnerability_Scanner',
                                ],
                                },
                        ],

        )
                Tags = ec2_resource.Tag('reousrce-id','key','name'
                        
                )
                
                instances = ec2_resource.instances.filter(Filters=[{'Name': 'instance-state-name', 'Values': ['running']}])
                for instance in instances:
                        if instance.tags != None:
                                for tags in instance.tags:
                                        if tags["Key"] == ["Name"]:
                                                instancename = tags["Value"]
                else:
                        instancename='-'
                        
                instances2 = ec2_resource.instances.filter(
                Filters=[{'Name': 'instance-state-name', 'Values': ['running']}])
                
                # Example for HttpResponse 
                '''json_ec2_list = json.dumps(ec2_list, indent=4, cls=DateTimeEncoder)
                json_post = serializers.serialize('json', ec2_list)
                re = Response.strftime("%A %d. %B %Y")
                print(DateTimeEncoder().encode(Response))        
                ret = json.dumps(ec2_list, indent=4, cls=DateTimeEncoder)
                #re = Response.strftime("%A %d. %B %Y")
                #print(DateTimeEncoder().encode(Response))        
                #ret = json.dumps(ec2_list, indent=4, cls=DateTimeEncoder)
                return HttpResponse(ret, content_type="application/json")
                '''
                """
                for v in ec2_list.values():
                        values = ec2_list.values
                        vlist = list(ec2_list.values())
                 
                #arr = numpy.array(ec2_list)
                
                str_ec2_list = json.dumps(ec2_list,cls=DateTimeEncoder)
              
                #tt = type(ec2_list)
                """
                """
                ec2_info= {}
                
                for reservation in ec2_list["Reservations"]:
                        for i in reservation["Instances"]:
                                for x in i['Tags']:
                # tagName이 없으면 'None'
                                    tagName = 'None'

                if x['Key'] == 'Name':
                    tagName = x['Value']
                
                #ec2_info[i["InstanceId"]] = [tagName,i['InstanceType'],i['State']['Name']]
                ec2_info = [tagName,i['InstanceType'],i['State']['Name']]
                """
                """ ec2 instances
                region = "ap-northeast-2"

                ec2_instance = session.resource('ec2', region)

                instances = ec2_instance.instances.filter(
                        Filters=[{'Name': 'instance-state-name', 'Values': ['running', 'terminated']}])

                for instance in instances:
                
                        ec2_list = instance.id, instance.instance_type
                        HttpResponse(ec2_list)
                """
             #   ec2_intances_json = json.dumps(ec2_intances,cls=DateTimeEncoder)
                
                test = instancename,instance.id
                tt = instance.id, instance.instance_type, instance.name
                return Response(tt)

     
                

class ListPost(generics.ListCreateAPIView):
    queryset = RS_AWS.objects.all()
    serializer_class = PostSerializer

class DetailPost(generics.RetrieveUpdateDestroyAPIView):
    queryset = RS_AWS.objects.all()
    serializer_class = PostSerializer
#print("sst")
