from typing import Any
import boto3
import sys
from django.shortcuts import render
from django.http import HttpResponse
from rest_framework.views import APIView
from rest_framework import generics

from rest_framework.response import Response
from django.views.decorators.csrf import csrf_exempt
from django.views.generic import ListView
from rest_framework import status
from django.http import Http404
from json import JSONEncoder
import datetime
from django.http import JsonResponse
from django.core import serializers
import json
import numpy
from .models import RS_AWS
from .serializers import PostSerializer
import time


class DateTimeEncoder(JSONEncoder):
                # Overide the default method
                def default(self, obj: Any) -> Any:
                        if isinstance(obj, (datetime.date, datetime.datetime)):
                                return obj.isoformat()
                        
# AWS Auth configuration for boto3
session = boto3.Session(profile_name='default')

ec2_resource = boto3.resource('ec2')

ec2_client = boto3.client('ec2',                                                  
                        )
paginator = ec2_client.get_paginator('describe_instances')
res_iterator = paginator.paginate()
#For System Vulnerability Check
ssm_client = boto3.client('ssm',
                          region_name = 'ap-northeast-2')


class ListView(APIView):
        def get(self,post):
                ec2_list = ec2_client.describe_instances(
                        Filters=[
                                {

                                },
                        ],

                )
                
                #try:
                        
                #instances = ec2_client.instances
                data_list = []
                        #instances = ec2_resource.instances.all()
                for page in res_iterator:
                        
                        for instance in page["Reservations"]:
                                
                                for x in instance['Groups']:
                                        
                                        data_list.append(x)
                                                

                                #    print("Inastance Name - %s,  Instance Id - %s, Owner - %s " %(instancename,instance.id,owner))
                                        #json_instance = JSONEncoder(instances)
                                        #json_instance = json.dumps(instances, default=DateTimeEncoder)
                        #return Response()
                                #return HttpResponse(f"인스턴스 아이디 {instance.id} 인스턴스 명 {instances.public_ip}", content_type="application/json")
                                
                                        #tt.append(instance)
                                        #return HttpResponse(f"인스턴스 아이디 {tt.id} 인스턴스 명 {instances.public_ip}", content_type="application/json")
                                                   # NameTag = ''
            # 인스턴스 정보 안에 Tags 정보가 있는 경우만

                                all = ec2_resource.meta.client.describe_instance_status()['InstanceStatuses']
                                json_all = json.dumps(all, indent=4)
                                for res in all:
                                                                
                                                                #data.append(data_t)
                                                                #return HttpResponse(f"인스턴스 아이디 {res.id} 인스턴스 명 {res.public_ip_address}", content_type="application/json")
                                                                
                                                                return Response(x)
                
        
class InspectEc2(APIView):
        def get(self,post):
                ec2_list = ec2_client.describe_instances(
                        Filters=[
                                {
                                'Name': 'tag:Name',
                                'Values': [
                                        'Cloud_Vulnerability_Scanner',
                                ],
                                },
                        ],

                )

                
                instances = ec2_resource.instances.filter(Filters=[{'Name': 'instance-state-name', 'Values': ['running']}])
                for instance in instances:
                        if instance.tags != None:
                                for tags in instance.tags:
                                        if tags["Key"] == ["Name"]:
                                                instancename = tags["Value"]
                else:
                        instancename='-'
                        
                ec2_info= {}
                
                for reservation in ec2_list["Reservations"]:
                        for i in reservation["Instances"]:
                                for x in i['Tags']:
                # tagName이 없으면 'None'
                                    tagName = 'None'

                if x['Key'] == 'Name':
                    tagName = x['Value']

                response = ssm_client.send_command(
                InstanceIds=['i-0932fa693a14a25e3'],
                DocumentName="AWS-RunShellScript",
                #Parameters={'commands': ['cat /etc/passwd']}, )
                Parameters={
                        'commands': [
                        'ls -la /etc/passwd',
                        ]
                },
                    )
                ssm_response = ssm_client.send_command(InstanceIds=['i-0932fa693a14a25e3'],
                                 DocumentName='AWS-RunShellScript',
                                 Parameters={"commands": ["ls -la /etc/passwd"]})
                command_id = ssm_response['Command']['CommandId']
                time.sleep(1)
                command_invocation_result = ssm_client.get_command_invocation(CommandId=command_id, InstanceId='i-0932fa693a14a25e3', PluginName="aws:RunShellScript")
                aa = command_invocation_result['StandardOutputContent']
                
                return Response(aa)

     
                

class ListPost(generics.ListCreateAPIView):
    queryset = RS_AWS.objects.all()
    serializer_class = PostSerializer

class DetailPost(generics.RetrieveUpdateDestroyAPIView):
    queryset = RS_AWS.objects.all()
    serializer_class = PostSerializer
#print("sst")
