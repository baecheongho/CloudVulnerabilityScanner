from typing import Any
import boto3
import sys
from django.shortcuts import render
from django.http import HttpResponse
from rest_framework.views import APIView
from rest_framework import generics

from rest_framework.response import Response
from django.views.decorators.csrf import csrf_exempt
from django.views.generic import ListView
from rest_framework import status
from django.http import Http404
from json import JSONEncoder
import datetime
from django.http import JsonResponse
from django.core import serializers
from .models import RS_AWS_CVS
from .models import RS_AWS_CSPM
from .serializers import PostSerializer
import time


class DateTimeEncoder(JSONEncoder):
                # Overide the default method
                def default(self, obj: Any) -> Any:
                        if isinstance(obj, (datetime.date, datetime.datetime)):
                                return obj.isoformat()
                        
# AWS Auth configuration for boto3
session = boto3.Session(profile_name='default')
ec2_resource = boto3.resource('ec2')
ec2_client = boto3.client('ec2',                                                  
                        )
# If using a paginator
""" 
paginator = ec2_client.get_paginator('describe_instances')
res_iterator = paginator.paginate()
                data_list = []
                        #instances = ec2_resource.instances.all()
                for page in res_iterator:
                        
                        for instance in page["Reservations"]:
                                
                                for x in instance['Instances']:
                                        
                                        data_list.append(x)
"""                                        
#For System Vulnerability Check
ssm_client = boto3.client('ssm',region_name = 'ap-northeast-2')
                
class ListView(APIView):
        def get(self, request):
                
                ec2_list = ec2_client.describe_instances(
                Filters=[
                        {
                                                        
                        },
                ],#MaxResults=123,
                )['Reservations']
                #try:
                #return HttpResponse(f"인스턴스 아이디 {tt.id} 인스턴스 명 {instances.public_ip}", content_type="application/json")
                data = []
                for instance in ec2_list:
                        for instances in instance['Instances']:
                                tag_val = ''
                                if 'Tags' in instances:    
                                        for tag in instances['Tags']:
                                                if tag['Key'] == 'Name':
                                                        tag_val = tag['Value']
                                                        
                                                        res_data = (
                                                                tag_val,
                                                                instances['InstanceId'],
                                                                
                                                        )
                                                        data.append(res_data)
                                                        #data.append()
                                                                        #return HttpResponse(f"인스턴스 아이디 {res.id} 인스턴스 명 {res.public_ip_address}", content_type="application/json")
        #        return Response(f"InstanceID{data[0]}")
                RS_AWS_CVS.account_name = data
                return Response(data)
                
        def post(self, request):
                ec2_list = ec2_client.describe_instances(
                        Filters=[
                                #{
                                #'Name': 'tag:Name',
                                #'Values': [
                                #        'Cloud_Vulnerability_Scanner',
                                #],
                                #},
                        ],

                )
                ssm_response = ssm_client.send_command(InstanceIds=[request.data['InstanceIds']],
                                                        DocumentName='AWS-RunShellScript',
                                                        Parameters={"commands": ["ifconfig | grep inet | grep 172"]})
                command_id = ssm_response['Command']['CommandId']
                time.sleep(1)
                command_invocation_result = ssm_client.get_command_invocation(CommandId=command_id, InstanceId=request.data['InstanceIds'], PluginName="aws:RunShellScript")
                result_command = command_invocation_result['StandardOutputContent']
                
                return Response(result_command)
                #return HttpResponse(f"인스턴스 아이디 {request} 인스턴스 명", content_type="application/json")

     
class ListPost(generics.ListCreateAPIView):
    queryset = RS_AWS_CVS.objects.all()
    serializer_class = PostSerializer

class DetailPost(generics.RetrieveUpdateDestroyAPIView):
    queryset = RS_AWS_CVS.objects.all()
    serializer_class = PostSerializer

